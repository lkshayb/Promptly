/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as SarvamAI from "../../../index";
import * as fs from "fs";
import { Blob } from "buffer";
export declare namespace SpeechToText {
    interface Options {
        environment?: core.Supplier<environments.SarvamAIEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiSubscriptionKey?: core.Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class SpeechToText {
    protected readonly _options: SpeechToText.Options;
    constructor(_options?: SpeechToText.Options);
    /**
     * ## Real-Time Speech to Text API
     *
     * This API transcribes speech to text in multiple Indian languages and English. Supports real-time transcription for interactive applications.
     *
     * ### Available Options:
     * - **Real-Time API** (Current Endpoint): For quick responses under 30 seconds with immediate results
     * - **Batch API**: For longer audio files, requires following a notebook script - [View Notebook](https://github.com/sarvamai/sarvam-ai-cookbook/tree/main/notebooks/stt/stt-batch-api)
     *   - Supports diarization (speaker identification)
     *
     * ### Note:
     * - Pricing differs for Real-Time and Batch APIs
     * - Diarization is only available in Batch API with separate pricing
     * - Please refer to [dashboard.sarvam.ai](https://dashboard.sarvam.ai) for detailed pricing information
     *
     * @param {File | fs.ReadStream | Blob} file
     * @param {SarvamAI.SpeechToTextTranscriptionRequest} request
     * @param {SpeechToText.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SarvamAI.BadRequestError}
     * @throws {@link SarvamAI.ForbiddenError}
     * @throws {@link SarvamAI.UnprocessableEntityError}
     * @throws {@link SarvamAI.TooManyRequestsError}
     * @throws {@link SarvamAI.InternalServerError}
     * @throws {@link SarvamAI.ServiceUnavailableError}
     *
     * @example
     *     await client.speechToText.transcribe(fs.createReadStream("/path/to/your/file"), {})
     */
    transcribe(file: File | fs.ReadStream | Blob, request: SarvamAI.SpeechToTextTranscriptionRequest, requestOptions?: SpeechToText.RequestOptions): Promise<SarvamAI.SpeechToTextResponse>;
    /**
     * ## Real-Time Speech to Text Translation API
     *
     * This API automatically detects the input language, transcribes the speech, and translates the text to English.
     *
     * ### Available Options:
     * - **Real-Time API** (Current Endpoint): For quick responses under 30 seconds with immediate results
     * - **Batch API**: For longer audio files, requires following a notebook script - [View Notebook](https://github.com/sarvamai/sarvam-ai-cookbook/tree/main/notebooks/stt-translate/stt-translate-batch-api)
     *   - Supports diarization (speaker identification)
     *
     * ### Note:
     * - Pricing differs for Real-Time and Batch APIs
     * - Diarization is only available in Batch API with separate pricing
     * - Please refer to [dashboard.sarvam.ai](https://dashboard.sarvam.ai) for detailed pricing information
     *
     * @param {File | fs.ReadStream | Blob} file
     * @param {SarvamAI.SpeechToTextTranslationRequest} request
     * @param {SpeechToText.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SarvamAI.BadRequestError}
     * @throws {@link SarvamAI.ForbiddenError}
     * @throws {@link SarvamAI.UnprocessableEntityError}
     * @throws {@link SarvamAI.TooManyRequestsError}
     * @throws {@link SarvamAI.InternalServerError}
     * @throws {@link SarvamAI.ServiceUnavailableError}
     *
     * @example
     *     await client.speechToText.translate(fs.createReadStream("/path/to/your/file"), {})
     */
    translate(file: File | fs.ReadStream | Blob, request: SarvamAI.SpeechToTextTranslationRequest, requestOptions?: SpeechToText.RequestOptions): Promise<SarvamAI.SpeechToTextTranslateResponse>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        "api-subscription-key": string | undefined;
    }>;
}
